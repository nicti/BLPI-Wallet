/* tslint:disable */
/* eslint-disable */
/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.10.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Bad request model
 * @export
 * @interface BadRequest
 */
export interface BadRequest {
    /**
     * Bad request message
     * @type {string}
     * @memberof BadRequest
     */
    'error': string;
}
/**
 * Error limited model
 * @export
 * @interface ErrorLimited
 */
export interface ErrorLimited {
    /**
     * Error limited message
     * @type {string}
     * @memberof ErrorLimited
     */
    'error': string;
}
/**
 * Forbidden model
 * @export
 * @interface Forbidden
 */
export interface Forbidden {
    /**
     * Forbidden message
     * @type {string}
     * @memberof Forbidden
     */
    'error': string;
    /**
     * status code received from SSO
     * @type {number}
     * @memberof Forbidden
     */
    'sso_status'?: number;
}
/**
 * Gateway timeout model
 * @export
 * @interface GatewayTimeout
 */
export interface GatewayTimeout {
    /**
     * Gateway timeout message
     * @type {string}
     * @memberof GatewayTimeout
     */
    'error': string;
    /**
     * number of seconds the request was given
     * @type {number}
     * @memberof GatewayTimeout
     */
    'timeout'?: number;
}
/**
 * 200 ok object
 * @export
 * @interface GetCharactersCharacterIdNotifications200Ok
 */
export interface GetCharactersCharacterIdNotifications200Ok {
    /**
     * is_read boolean
     * @type {boolean}
     * @memberof GetCharactersCharacterIdNotifications200Ok
     */
    'is_read'?: boolean;
    /**
     * notification_id integer
     * @type {number}
     * @memberof GetCharactersCharacterIdNotifications200Ok
     */
    'notification_id': number;
    /**
     * sender_id integer
     * @type {number}
     * @memberof GetCharactersCharacterIdNotifications200Ok
     */
    'sender_id': number;
    /**
     * sender_type string
     * @type {string}
     * @memberof GetCharactersCharacterIdNotifications200Ok
     */
    'sender_type': GetCharactersCharacterIdNotifications200OkSenderTypeEnum;
    /**
     * text string
     * @type {string}
     * @memberof GetCharactersCharacterIdNotifications200Ok
     */
    'text'?: string;
    /**
     * timestamp string
     * @type {string}
     * @memberof GetCharactersCharacterIdNotifications200Ok
     */
    'timestamp': string;
    /**
     * type string
     * @type {string}
     * @memberof GetCharactersCharacterIdNotifications200Ok
     */
    'type': GetCharactersCharacterIdNotifications200OkTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum GetCharactersCharacterIdNotifications200OkSenderTypeEnum {
    Character = 'character',
    Corporation = 'corporation',
    Alliance = 'alliance',
    Faction = 'faction',
    Other = 'other'
}
/**
    * @export
    * @enum {string}
    */
export enum GetCharactersCharacterIdNotifications200OkTypeEnum {
    AcceptedAlly = 'AcceptedAlly',
    AcceptedSurrender = 'AcceptedSurrender',
    AgentRetiredTrigravian = 'AgentRetiredTrigravian',
    AllAnchoringMsg = 'AllAnchoringMsg',
    AllMaintenanceBillMsg = 'AllMaintenanceBillMsg',
    AllStrucInvulnerableMsg = 'AllStrucInvulnerableMsg',
    AllStructVulnerableMsg = 'AllStructVulnerableMsg',
    AllWarCorpJoinedAllianceMsg = 'AllWarCorpJoinedAllianceMsg',
    AllWarDeclaredMsg = 'AllWarDeclaredMsg',
    AllWarInvalidatedMsg = 'AllWarInvalidatedMsg',
    AllWarRetractedMsg = 'AllWarRetractedMsg',
    AllWarSurrenderMsg = 'AllWarSurrenderMsg',
    AllianceCapitalChanged = 'AllianceCapitalChanged',
    AllianceWarDeclaredV2 = 'AllianceWarDeclaredV2',
    AllyContractCancelled = 'AllyContractCancelled',
    AllyJoinedWarAggressorMsg = 'AllyJoinedWarAggressorMsg',
    AllyJoinedWarAllyMsg = 'AllyJoinedWarAllyMsg',
    AllyJoinedWarDefenderMsg = 'AllyJoinedWarDefenderMsg',
    BattlePunishFriendlyFire = 'BattlePunishFriendlyFire',
    BillOutOfMoneyMsg = 'BillOutOfMoneyMsg',
    BillPaidCorpAllMsg = 'BillPaidCorpAllMsg',
    BountyClaimMsg = 'BountyClaimMsg',
    BountyEssShared = 'BountyESSShared',
    BountyEssTaken = 'BountyESSTaken',
    BountyPlacedAlliance = 'BountyPlacedAlliance',
    BountyPlacedChar = 'BountyPlacedChar',
    BountyPlacedCorp = 'BountyPlacedCorp',
    BountyYourBountyClaimed = 'BountyYourBountyClaimed',
    BuddyConnectContactAdd = 'BuddyConnectContactAdd',
    CharAppAcceptMsg = 'CharAppAcceptMsg',
    CharAppRejectMsg = 'CharAppRejectMsg',
    CharAppWithdrawMsg = 'CharAppWithdrawMsg',
    CharLeftCorpMsg = 'CharLeftCorpMsg',
    CharMedalMsg = 'CharMedalMsg',
    CharTerminationMsg = 'CharTerminationMsg',
    CloneActivationMsg = 'CloneActivationMsg',
    CloneActivationMsg2 = 'CloneActivationMsg2',
    CloneMovedMsg = 'CloneMovedMsg',
    CloneRevokedMsg1 = 'CloneRevokedMsg1',
    CloneRevokedMsg2 = 'CloneRevokedMsg2',
    CombatOperationFinished = 'CombatOperationFinished',
    ContactAdd = 'ContactAdd',
    ContactEdit = 'ContactEdit',
    ContainerPasswordMsg = 'ContainerPasswordMsg',
    ContractRegionChangedToPochven = 'ContractRegionChangedToPochven',
    CorpAllBillMsg = 'CorpAllBillMsg',
    CorpAppAcceptMsg = 'CorpAppAcceptMsg',
    CorpAppInvitedMsg = 'CorpAppInvitedMsg',
    CorpAppNewMsg = 'CorpAppNewMsg',
    CorpAppRejectCustomMsg = 'CorpAppRejectCustomMsg',
    CorpAppRejectMsg = 'CorpAppRejectMsg',
    CorpBecameWarEligible = 'CorpBecameWarEligible',
    CorpDividendMsg = 'CorpDividendMsg',
    CorpFriendlyFireDisableTimerCompleted = 'CorpFriendlyFireDisableTimerCompleted',
    CorpFriendlyFireDisableTimerStarted = 'CorpFriendlyFireDisableTimerStarted',
    CorpFriendlyFireEnableTimerCompleted = 'CorpFriendlyFireEnableTimerCompleted',
    CorpFriendlyFireEnableTimerStarted = 'CorpFriendlyFireEnableTimerStarted',
    CorpKicked = 'CorpKicked',
    CorpLiquidationMsg = 'CorpLiquidationMsg',
    CorpNewCeoMsg = 'CorpNewCEOMsg',
    CorpNewsMsg = 'CorpNewsMsg',
    CorpNoLongerWarEligible = 'CorpNoLongerWarEligible',
    CorpOfficeExpirationMsg = 'CorpOfficeExpirationMsg',
    CorpStructLostMsg = 'CorpStructLostMsg',
    CorpTaxChangeMsg = 'CorpTaxChangeMsg',
    CorpVoteCeoRevokedMsg = 'CorpVoteCEORevokedMsg',
    CorpVoteMsg = 'CorpVoteMsg',
    CorpWarDeclaredMsg = 'CorpWarDeclaredMsg',
    CorpWarDeclaredV2 = 'CorpWarDeclaredV2',
    CorpWarFightingLegalMsg = 'CorpWarFightingLegalMsg',
    CorpWarInvalidatedMsg = 'CorpWarInvalidatedMsg',
    CorpWarRetractedMsg = 'CorpWarRetractedMsg',
    CorpWarSurrenderMsg = 'CorpWarSurrenderMsg',
    CustomsMsg = 'CustomsMsg',
    DeclareWar = 'DeclareWar',
    DistrictAttacked = 'DistrictAttacked',
    DustAppAcceptedMsg = 'DustAppAcceptedMsg',
    EssMainBankLink = 'ESSMainBankLink',
    EntosisCaptureStarted = 'EntosisCaptureStarted',
    ExpertSystemExpired = 'ExpertSystemExpired',
    ExpertSystemExpiryImminent = 'ExpertSystemExpiryImminent',
    FwAllianceKickMsg = 'FWAllianceKickMsg',
    FwAllianceWarningMsg = 'FWAllianceWarningMsg',
    FwCharKickMsg = 'FWCharKickMsg',
    FwCharRankGainMsg = 'FWCharRankGainMsg',
    FwCharRankLossMsg = 'FWCharRankLossMsg',
    FwCharWarningMsg = 'FWCharWarningMsg',
    FwCorpJoinMsg = 'FWCorpJoinMsg',
    FwCorpKickMsg = 'FWCorpKickMsg',
    FwCorpLeaveMsg = 'FWCorpLeaveMsg',
    FwCorpWarningMsg = 'FWCorpWarningMsg',
    FacWarCorpJoinRequestMsg = 'FacWarCorpJoinRequestMsg',
    FacWarCorpJoinWithdrawMsg = 'FacWarCorpJoinWithdrawMsg',
    FacWarCorpLeaveRequestMsg = 'FacWarCorpLeaveRequestMsg',
    FacWarCorpLeaveWithdrawMsg = 'FacWarCorpLeaveWithdrawMsg',
    FacWarLpDisqualifiedEvent = 'FacWarLPDisqualifiedEvent',
    FacWarLpDisqualifiedKill = 'FacWarLPDisqualifiedKill',
    FacWarLpPayoutEvent = 'FacWarLPPayoutEvent',
    FacWarLpPayoutKill = 'FacWarLPPayoutKill',
    GameTimeAdded = 'GameTimeAdded',
    GameTimeReceived = 'GameTimeReceived',
    GameTimeSent = 'GameTimeSent',
    GiftReceived = 'GiftReceived',
    IHubDestroyedByBillFailure = 'IHubDestroyedByBillFailure',
    IncursionCompletedMsg = 'IncursionCompletedMsg',
    IndustryOperationFinished = 'IndustryOperationFinished',
    IndustryTeamAuctionLost = 'IndustryTeamAuctionLost',
    IndustryTeamAuctionWon = 'IndustryTeamAuctionWon',
    InfrastructureHubBillAboutToExpire = 'InfrastructureHubBillAboutToExpire',
    InsuranceExpirationMsg = 'InsuranceExpirationMsg',
    InsuranceFirstShipMsg = 'InsuranceFirstShipMsg',
    InsuranceInvalidatedMsg = 'InsuranceInvalidatedMsg',
    InsuranceIssuedMsg = 'InsuranceIssuedMsg',
    InsurancePayoutMsg = 'InsurancePayoutMsg',
    InvasionCompletedMsg = 'InvasionCompletedMsg',
    InvasionSystemLogin = 'InvasionSystemLogin',
    InvasionSystemStart = 'InvasionSystemStart',
    JumpCloneDeletedMsg1 = 'JumpCloneDeletedMsg1',
    JumpCloneDeletedMsg2 = 'JumpCloneDeletedMsg2',
    KillReportFinalBlow = 'KillReportFinalBlow',
    KillReportVictim = 'KillReportVictim',
    KillRightAvailable = 'KillRightAvailable',
    KillRightAvailableOpen = 'KillRightAvailableOpen',
    KillRightEarned = 'KillRightEarned',
    KillRightUnavailable = 'KillRightUnavailable',
    KillRightUnavailableOpen = 'KillRightUnavailableOpen',
    KillRightUsed = 'KillRightUsed',
    LocateCharMsg = 'LocateCharMsg',
    MadeWarMutual = 'MadeWarMutual',
    MercOfferRetractedMsg = 'MercOfferRetractedMsg',
    MercOfferedNegotiationMsg = 'MercOfferedNegotiationMsg',
    MissionCanceledTriglavian = 'MissionCanceledTriglavian',
    MissionOfferExpirationMsg = 'MissionOfferExpirationMsg',
    MissionTimeoutMsg = 'MissionTimeoutMsg',
    MoonminingAutomaticFracture = 'MoonminingAutomaticFracture',
    MoonminingExtractionCancelled = 'MoonminingExtractionCancelled',
    MoonminingExtractionFinished = 'MoonminingExtractionFinished',
    MoonminingExtractionStarted = 'MoonminingExtractionStarted',
    MoonminingLaserFired = 'MoonminingLaserFired',
    MutualWarExpired = 'MutualWarExpired',
    MutualWarInviteAccepted = 'MutualWarInviteAccepted',
    MutualWarInviteRejected = 'MutualWarInviteRejected',
    MutualWarInviteSent = 'MutualWarInviteSent',
    NpcStandingsGained = 'NPCStandingsGained',
    NpcStandingsLost = 'NPCStandingsLost',
    OfferToAllyRetracted = 'OfferToAllyRetracted',
    OfferedSurrender = 'OfferedSurrender',
    OfferedToAlly = 'OfferedToAlly',
    OfficeLeaseCanceledInsufficientStandings = 'OfficeLeaseCanceledInsufficientStandings',
    OldLscMessages = 'OldLscMessages',
    OperationFinished = 'OperationFinished',
    OrbitalAttacked = 'OrbitalAttacked',
    OrbitalReinforced = 'OrbitalReinforced',
    OwnershipTransferred = 'OwnershipTransferred',
    RaffleCreated = 'RaffleCreated',
    RaffleExpired = 'RaffleExpired',
    RaffleFinished = 'RaffleFinished',
    ReimbursementMsg = 'ReimbursementMsg',
    ResearchMissionAvailableMsg = 'ResearchMissionAvailableMsg',
    RetractsWar = 'RetractsWar',
    SeasonalChallengeCompleted = 'SeasonalChallengeCompleted',
    SovAllClaimAquiredMsg = 'SovAllClaimAquiredMsg',
    SovAllClaimLostMsg = 'SovAllClaimLostMsg',
    SovCommandNodeEventStarted = 'SovCommandNodeEventStarted',
    SovCorpBillLateMsg = 'SovCorpBillLateMsg',
    SovCorpClaimFailMsg = 'SovCorpClaimFailMsg',
    SovDisruptorMsg = 'SovDisruptorMsg',
    SovStationEnteredFreeport = 'SovStationEnteredFreeport',
    SovStructureDestroyed = 'SovStructureDestroyed',
    SovStructureReinforced = 'SovStructureReinforced',
    SovStructureSelfDestructCancel = 'SovStructureSelfDestructCancel',
    SovStructureSelfDestructFinished = 'SovStructureSelfDestructFinished',
    SovStructureSelfDestructRequested = 'SovStructureSelfDestructRequested',
    SovereigntyIhDamageMsg = 'SovereigntyIHDamageMsg',
    SovereigntySbuDamageMsg = 'SovereigntySBUDamageMsg',
    SovereigntyTcuDamageMsg = 'SovereigntyTCUDamageMsg',
    StationAggressionMsg1 = 'StationAggressionMsg1',
    StationAggressionMsg2 = 'StationAggressionMsg2',
    StationConquerMsg = 'StationConquerMsg',
    StationServiceDisabled = 'StationServiceDisabled',
    StationServiceEnabled = 'StationServiceEnabled',
    StationStateChangeMsg = 'StationStateChangeMsg',
    StoryLineMissionAvailableMsg = 'StoryLineMissionAvailableMsg',
    StructureAnchoring = 'StructureAnchoring',
    StructureCourierContractChanged = 'StructureCourierContractChanged',
    StructureDestroyed = 'StructureDestroyed',
    StructureFuelAlert = 'StructureFuelAlert',
    StructureImpendingAbandonmentAssetsAtRisk = 'StructureImpendingAbandonmentAssetsAtRisk',
    StructureItemsDelivered = 'StructureItemsDelivered',
    StructureItemsMovedToSafety = 'StructureItemsMovedToSafety',
    StructureLostArmor = 'StructureLostArmor',
    StructureLostShields = 'StructureLostShields',
    StructureOnline = 'StructureOnline',
    StructureServicesOffline = 'StructureServicesOffline',
    StructureUnanchoring = 'StructureUnanchoring',
    StructureUnderAttack = 'StructureUnderAttack',
    StructureWentHighPower = 'StructureWentHighPower',
    StructureWentLowPower = 'StructureWentLowPower',
    StructuresJobsCancelled = 'StructuresJobsCancelled',
    StructuresJobsPaused = 'StructuresJobsPaused',
    StructuresReinforcementChanged = 'StructuresReinforcementChanged',
    TowerAlertMsg = 'TowerAlertMsg',
    TowerResourceAlertMsg = 'TowerResourceAlertMsg',
    TransactionReversalMsg = 'TransactionReversalMsg',
    TutorialMsg = 'TutorialMsg',
    WarAdopted = 'WarAdopted ',
    WarAllyInherited = 'WarAllyInherited',
    WarAllyOfferDeclinedMsg = 'WarAllyOfferDeclinedMsg',
    WarConcordInvalidates = 'WarConcordInvalidates',
    WarDeclared = 'WarDeclared',
    WarEndedHqSecurityDrop = 'WarEndedHqSecurityDrop',
    WarHqRemovedFromSpace = 'WarHQRemovedFromSpace',
    WarInherited = 'WarInherited',
    WarInvalid = 'WarInvalid',
    WarRetracted = 'WarRetracted',
    WarRetractedByConcord = 'WarRetractedByConcord',
    WarSurrenderDeclinedMsg = 'WarSurrenderDeclinedMsg',
    WarSurrenderOfferMsg = 'WarSurrenderOfferMsg'
}

/**
 * 200 ok object
 * @export
 * @interface GetCharactersCharacterIdWalletJournal200Ok
 */
export interface GetCharactersCharacterIdWalletJournal200Ok {
    /**
     * The amount of ISK given or taken from the wallet as a result of the given transaction. Positive when ISK is deposited into the wallet and negative when ISK is withdrawn
     * @type {number}
     * @memberof GetCharactersCharacterIdWalletJournal200Ok
     */
    'amount'?: number;
    /**
     * Wallet balance after transaction occurred
     * @type {number}
     * @memberof GetCharactersCharacterIdWalletJournal200Ok
     */
    'balance'?: number;
    /**
     * An ID that gives extra context to the particular transaction. Because of legacy reasons the context is completely different per ref_type and means different things. It is also possible to not have a context_id
     * @type {number}
     * @memberof GetCharactersCharacterIdWalletJournal200Ok
     */
    'context_id'?: number;
    /**
     * The type of the given context_id if present
     * @type {string}
     * @memberof GetCharactersCharacterIdWalletJournal200Ok
     */
    'context_id_type'?: GetCharactersCharacterIdWalletJournal200OkContextIdTypeEnum;
    /**
     * Date and time of transaction
     * @type {string}
     * @memberof GetCharactersCharacterIdWalletJournal200Ok
     */
    'date': string;
    /**
     * The reason for the transaction, mirrors what is seen in the client
     * @type {string}
     * @memberof GetCharactersCharacterIdWalletJournal200Ok
     */
    'description': string;
    /**
     * The id of the first party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name
     * @type {number}
     * @memberof GetCharactersCharacterIdWalletJournal200Ok
     */
    'first_party_id'?: number;
    /**
     * Unique journal reference ID
     * @type {number}
     * @memberof GetCharactersCharacterIdWalletJournal200Ok
     */
    'id': number;
    /**
     * The user stated reason for the transaction. Only applies to some ref_types
     * @type {string}
     * @memberof GetCharactersCharacterIdWalletJournal200Ok
     */
    'reason'?: string;
    /**
     * \"The transaction type for the given. transaction. Different transaction types will populate different attributes.\"
     * @type {string}
     * @memberof GetCharactersCharacterIdWalletJournal200Ok
     */
    'ref_type': GetCharactersCharacterIdWalletJournal200OkRefTypeEnum;
    /**
     * The id of the second party involved in the transaction. This attribute has no consistency and is different or non existant for particular ref_types. The description attribute will help make sense of what this attribute means. For more info about the given ID it can be dropped into the /universe/names/ ESI route to determine its type and name
     * @type {number}
     * @memberof GetCharactersCharacterIdWalletJournal200Ok
     */
    'second_party_id'?: number;
    /**
     * Tax amount received. Only applies to tax related transactions
     * @type {number}
     * @memberof GetCharactersCharacterIdWalletJournal200Ok
     */
    'tax'?: number;
    /**
     * The corporation ID receiving any tax paid. Only applies to tax related transactions
     * @type {number}
     * @memberof GetCharactersCharacterIdWalletJournal200Ok
     */
    'tax_receiver_id'?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum GetCharactersCharacterIdWalletJournal200OkContextIdTypeEnum {
    StructureId = 'structure_id',
    StationId = 'station_id',
    MarketTransactionId = 'market_transaction_id',
    CharacterId = 'character_id',
    CorporationId = 'corporation_id',
    AllianceId = 'alliance_id',
    EveSystem = 'eve_system',
    IndustryJobId = 'industry_job_id',
    ContractId = 'contract_id',
    PlanetId = 'planet_id',
    SystemId = 'system_id',
    TypeId = 'type_id'
}
/**
    * @export
    * @enum {string}
    */
export enum GetCharactersCharacterIdWalletJournal200OkRefTypeEnum {
    AccelerationGateFee = 'acceleration_gate_fee',
    AdvertisementListingFee = 'advertisement_listing_fee',
    AgentDonation = 'agent_donation',
    AgentLocationServices = 'agent_location_services',
    AgentMiscellaneous = 'agent_miscellaneous',
    AgentMissionCollateralPaid = 'agent_mission_collateral_paid',
    AgentMissionCollateralRefunded = 'agent_mission_collateral_refunded',
    AgentMissionReward = 'agent_mission_reward',
    AgentMissionRewardCorporationTax = 'agent_mission_reward_corporation_tax',
    AgentMissionTimeBonusReward = 'agent_mission_time_bonus_reward',
    AgentMissionTimeBonusRewardCorporationTax = 'agent_mission_time_bonus_reward_corporation_tax',
    AgentSecurityServices = 'agent_security_services',
    AgentServicesRendered = 'agent_services_rendered',
    AgentsPreward = 'agents_preward',
    AllianceMaintainanceFee = 'alliance_maintainance_fee',
    AllianceRegistrationFee = 'alliance_registration_fee',
    AssetSafetyRecoveryTax = 'asset_safety_recovery_tax',
    Bounty = 'bounty',
    BountyPrize = 'bounty_prize',
    BountyPrizeCorporationTax = 'bounty_prize_corporation_tax',
    BountyPrizes = 'bounty_prizes',
    BountyReimbursement = 'bounty_reimbursement',
    BountySurcharge = 'bounty_surcharge',
    BrokersFee = 'brokers_fee',
    CloneActivation = 'clone_activation',
    CloneTransfer = 'clone_transfer',
    ContrabandFine = 'contraband_fine',
    ContractAuctionBid = 'contract_auction_bid',
    ContractAuctionBidCorp = 'contract_auction_bid_corp',
    ContractAuctionBidRefund = 'contract_auction_bid_refund',
    ContractAuctionSold = 'contract_auction_sold',
    ContractBrokersFee = 'contract_brokers_fee',
    ContractBrokersFeeCorp = 'contract_brokers_fee_corp',
    ContractCollateral = 'contract_collateral',
    ContractCollateralDepositedCorp = 'contract_collateral_deposited_corp',
    ContractCollateralPayout = 'contract_collateral_payout',
    ContractCollateralRefund = 'contract_collateral_refund',
    ContractDeposit = 'contract_deposit',
    ContractDepositCorp = 'contract_deposit_corp',
    ContractDepositRefund = 'contract_deposit_refund',
    ContractDepositSalesTax = 'contract_deposit_sales_tax',
    ContractPrice = 'contract_price',
    ContractPricePaymentCorp = 'contract_price_payment_corp',
    ContractReversal = 'contract_reversal',
    ContractReward = 'contract_reward',
    ContractRewardDeposited = 'contract_reward_deposited',
    ContractRewardDepositedCorp = 'contract_reward_deposited_corp',
    ContractRewardRefund = 'contract_reward_refund',
    ContractSalesTax = 'contract_sales_tax',
    Copying = 'copying',
    CorporateRewardPayout = 'corporate_reward_payout',
    CorporateRewardTax = 'corporate_reward_tax',
    CorporationAccountWithdrawal = 'corporation_account_withdrawal',
    CorporationBulkPayment = 'corporation_bulk_payment',
    CorporationDividendPayment = 'corporation_dividend_payment',
    CorporationLiquidation = 'corporation_liquidation',
    CorporationLogoChangeCost = 'corporation_logo_change_cost',
    CorporationPayment = 'corporation_payment',
    CorporationRegistrationFee = 'corporation_registration_fee',
    CourierMissionEscrow = 'courier_mission_escrow',
    Cspa = 'cspa',
    Cspaofflinerefund = 'cspaofflinerefund',
    DailyChallengeReward = 'daily_challenge_reward',
    DatacoreFee = 'datacore_fee',
    DnaModificationFee = 'dna_modification_fee',
    DockingFee = 'docking_fee',
    DuelWagerEscrow = 'duel_wager_escrow',
    DuelWagerPayment = 'duel_wager_payment',
    DuelWagerRefund = 'duel_wager_refund',
    EssEscrowTransfer = 'ess_escrow_transfer',
    ExternalTradeDelivery = 'external_trade_delivery',
    ExternalTradeFreeze = 'external_trade_freeze',
    ExternalTradeThaw = 'external_trade_thaw',
    FactorySlotRentalFee = 'factory_slot_rental_fee',
    FluxPayout = 'flux_payout',
    FluxTax = 'flux_tax',
    FluxTicketRepayment = 'flux_ticket_repayment',
    FluxTicketSale = 'flux_ticket_sale',
    GmCashTransfer = 'gm_cash_transfer',
    IndustryJobTax = 'industry_job_tax',
    InfrastructureHubMaintenance = 'infrastructure_hub_maintenance',
    Inheritance = 'inheritance',
    Insurance = 'insurance',
    ItemTraderPayment = 'item_trader_payment',
    JumpCloneActivationFee = 'jump_clone_activation_fee',
    JumpCloneInstallationFee = 'jump_clone_installation_fee',
    KillRightFee = 'kill_right_fee',
    LpStore = 'lp_store',
    Manufacturing = 'manufacturing',
    MarketEscrow = 'market_escrow',
    MarketFinePaid = 'market_fine_paid',
    MarketProviderTax = 'market_provider_tax',
    MarketTransaction = 'market_transaction',
    MedalCreation = 'medal_creation',
    MedalIssued = 'medal_issued',
    MilestoneRewardPayment = 'milestone_reward_payment',
    MissionCompletion = 'mission_completion',
    MissionCost = 'mission_cost',
    MissionExpiration = 'mission_expiration',
    MissionReward = 'mission_reward',
    OfficeRentalFee = 'office_rental_fee',
    OperationBonus = 'operation_bonus',
    OpportunityReward = 'opportunity_reward',
    PlanetaryConstruction = 'planetary_construction',
    PlanetaryExportTax = 'planetary_export_tax',
    PlanetaryImportTax = 'planetary_import_tax',
    PlayerDonation = 'player_donation',
    PlayerTrading = 'player_trading',
    ProjectDiscoveryReward = 'project_discovery_reward',
    ProjectDiscoveryTax = 'project_discovery_tax',
    Reaction = 'reaction',
    RedeemedIskToken = 'redeemed_isk_token',
    ReleaseOfImpoundedProperty = 'release_of_impounded_property',
    RepairBill = 'repair_bill',
    ReprocessingTax = 'reprocessing_tax',
    ResearchingMaterialProductivity = 'researching_material_productivity',
    ResearchingTechnology = 'researching_technology',
    ResearchingTimeProductivity = 'researching_time_productivity',
    ResourceWarsReward = 'resource_wars_reward',
    ReverseEngineering = 'reverse_engineering',
    SeasonChallengeReward = 'season_challenge_reward',
    SecurityProcessingFee = 'security_processing_fee',
    Shares = 'shares',
    SkillPurchase = 'skill_purchase',
    SovereignityBill = 'sovereignity_bill',
    StorePurchase = 'store_purchase',
    StorePurchaseRefund = 'store_purchase_refund',
    StructureGateJump = 'structure_gate_jump',
    TransactionTax = 'transaction_tax',
    UpkeepAdjustmentFee = 'upkeep_adjustment_fee',
    WarAllyContract = 'war_ally_contract',
    WarFee = 'war_fee',
    WarFeeSurrender = 'war_fee_surrender'
}

/**
 * Internal server error model
 * @export
 * @interface InternalServerError
 */
export interface InternalServerError {
    /**
     * Internal server error message
     * @type {string}
     * @memberof InternalServerError
     */
    'error': string;
}
/**
 * Service unavailable model
 * @export
 * @interface ServiceUnavailable
 */
export interface ServiceUnavailable {
    /**
     * Service unavailable message
     * @type {string}
     * @memberof ServiceUnavailable
     */
    'error': string;
}
/**
 * Unauthorized model
 * @export
 * @interface Unauthorized
 */
export interface Unauthorized {
    /**
     * Unauthorized message
     * @type {string}
     * @memberof Unauthorized
     */
    'error': string;
}

/**
 * CharacterApi - axios parameter creator
 * @export
 */
export const CharacterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return character notifications  --- Alternate route: `/dev/characters/{character_id}/notifications/`  Alternate route: `/latest/characters/{character_id}/notifications/`  Alternate route: `/v5/characters/{character_id}/notifications/`  --- This route is cached for up to 600 seconds
         * @summary Get character notifications
         * @param {number} characterId An EVE character ID
         * @param {'tranquility'} [datasource] The server name you would like data from
         * @param {string} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
         * @param {string} [token] Access token to use if unable to set a header
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCharactersCharacterIdNotifications: async (characterId: number, datasource?: 'tranquility', ifNoneMatch?: string, token?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'characterId' is not null or undefined
            assertParamExists('getCharactersCharacterIdNotifications', 'characterId', characterId)
            const localVarPath = `/characters/{character_id}/notifications/`
                .replace(`{${"character_id"}}`, encodeURIComponent(String(characterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication evesso required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "evesso", ["esi-characters.read_notifications.v1"], configuration)

            if (datasource !== undefined) {
                localVarQueryParameter['datasource'] = datasource;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (ifNoneMatch !== undefined && ifNoneMatch !== null) {
                localVarHeaderParameter['If-None-Match'] = String(ifNoneMatch);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CharacterApi - functional programming interface
 * @export
 */
export const CharacterApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CharacterApiAxiosParamCreator(configuration)
    return {
        /**
         * Return character notifications  --- Alternate route: `/dev/characters/{character_id}/notifications/`  Alternate route: `/latest/characters/{character_id}/notifications/`  Alternate route: `/v5/characters/{character_id}/notifications/`  --- This route is cached for up to 600 seconds
         * @summary Get character notifications
         * @param {number} characterId An EVE character ID
         * @param {'tranquility'} [datasource] The server name you would like data from
         * @param {string} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
         * @param {string} [token] Access token to use if unable to set a header
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCharactersCharacterIdNotifications(characterId: number, datasource?: 'tranquility', ifNoneMatch?: string, token?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetCharactersCharacterIdNotifications200Ok>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCharactersCharacterIdNotifications(characterId, datasource, ifNoneMatch, token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CharacterApi - factory interface
 * @export
 */
export const CharacterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CharacterApiFp(configuration)
    return {
        /**
         * Return character notifications  --- Alternate route: `/dev/characters/{character_id}/notifications/`  Alternate route: `/latest/characters/{character_id}/notifications/`  Alternate route: `/v5/characters/{character_id}/notifications/`  --- This route is cached for up to 600 seconds
         * @summary Get character notifications
         * @param {number} characterId An EVE character ID
         * @param {'tranquility'} [datasource] The server name you would like data from
         * @param {string} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
         * @param {string} [token] Access token to use if unable to set a header
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCharactersCharacterIdNotifications(characterId: number, datasource?: 'tranquility', ifNoneMatch?: string, token?: string, options?: any): AxiosPromise<Array<GetCharactersCharacterIdNotifications200Ok>> {
            return localVarFp.getCharactersCharacterIdNotifications(characterId, datasource, ifNoneMatch, token, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CharacterApi - object-oriented interface
 * @export
 * @class CharacterApi
 * @extends {BaseAPI}
 */
export class CharacterApi extends BaseAPI {
    /**
     * Return character notifications  --- Alternate route: `/dev/characters/{character_id}/notifications/`  Alternate route: `/latest/characters/{character_id}/notifications/`  Alternate route: `/v5/characters/{character_id}/notifications/`  --- This route is cached for up to 600 seconds
     * @summary Get character notifications
     * @param {number} characterId An EVE character ID
     * @param {'tranquility'} [datasource] The server name you would like data from
     * @param {string} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {string} [token] Access token to use if unable to set a header
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CharacterApi
     */
    public getCharactersCharacterIdNotifications(characterId: number, datasource?: 'tranquility', ifNoneMatch?: string, token?: string, options?: AxiosRequestConfig) {
        return CharacterApiFp(this.configuration).getCharactersCharacterIdNotifications(characterId, datasource, ifNoneMatch, token, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WalletApi - axios parameter creator
 * @export
 */
export const WalletApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve the given character\'s wallet journal going 30 days back  --- Alternate route: `/dev/characters/{character_id}/wallet/journal/`  Alternate route: `/latest/characters/{character_id}/wallet/journal/`  --- This route is cached for up to 3600 seconds
         * @summary Get character wallet journal
         * @param {number} characterId An EVE character ID
         * @param {'tranquility'} [datasource] The server name you would like data from
         * @param {string} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
         * @param {number} [page] Which page of results to return
         * @param {string} [token] Access token to use if unable to set a header
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCharactersCharacterIdWalletJournal: async (characterId: number, datasource?: 'tranquility', ifNoneMatch?: string, page?: number, token?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'characterId' is not null or undefined
            assertParamExists('getCharactersCharacterIdWalletJournal', 'characterId', characterId)
            const localVarPath = `/characters/{character_id}/wallet/journal/`
                .replace(`{${"character_id"}}`, encodeURIComponent(String(characterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication evesso required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "evesso", ["esi-wallet.read_character_wallet.v1"], configuration)

            if (datasource !== undefined) {
                localVarQueryParameter['datasource'] = datasource;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (ifNoneMatch !== undefined && ifNoneMatch !== null) {
                localVarHeaderParameter['If-None-Match'] = String(ifNoneMatch);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WalletApi - functional programming interface
 * @export
 */
export const WalletApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WalletApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve the given character\'s wallet journal going 30 days back  --- Alternate route: `/dev/characters/{character_id}/wallet/journal/`  Alternate route: `/latest/characters/{character_id}/wallet/journal/`  --- This route is cached for up to 3600 seconds
         * @summary Get character wallet journal
         * @param {number} characterId An EVE character ID
         * @param {'tranquility'} [datasource] The server name you would like data from
         * @param {string} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
         * @param {number} [page] Which page of results to return
         * @param {string} [token] Access token to use if unable to set a header
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCharactersCharacterIdWalletJournal(characterId: number, datasource?: 'tranquility', ifNoneMatch?: string, page?: number, token?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetCharactersCharacterIdWalletJournal200Ok>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCharactersCharacterIdWalletJournal(characterId, datasource, ifNoneMatch, page, token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WalletApi - factory interface
 * @export
 */
export const WalletApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WalletApiFp(configuration)
    return {
        /**
         * Retrieve the given character\'s wallet journal going 30 days back  --- Alternate route: `/dev/characters/{character_id}/wallet/journal/`  Alternate route: `/latest/characters/{character_id}/wallet/journal/`  --- This route is cached for up to 3600 seconds
         * @summary Get character wallet journal
         * @param {number} characterId An EVE character ID
         * @param {'tranquility'} [datasource] The server name you would like data from
         * @param {string} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
         * @param {number} [page] Which page of results to return
         * @param {string} [token] Access token to use if unable to set a header
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCharactersCharacterIdWalletJournal(characterId: number, datasource?: 'tranquility', ifNoneMatch?: string, page?: number, token?: string, options?: any): AxiosPromise<Array<GetCharactersCharacterIdWalletJournal200Ok>> {
            return localVarFp.getCharactersCharacterIdWalletJournal(characterId, datasource, ifNoneMatch, page, token, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WalletApi - object-oriented interface
 * @export
 * @class WalletApi
 * @extends {BaseAPI}
 */
export class WalletApi extends BaseAPI {
    /**
     * Retrieve the given character\'s wallet journal going 30 days back  --- Alternate route: `/dev/characters/{character_id}/wallet/journal/`  Alternate route: `/latest/characters/{character_id}/wallet/journal/`  --- This route is cached for up to 3600 seconds
     * @summary Get character wallet journal
     * @param {number} characterId An EVE character ID
     * @param {'tranquility'} [datasource] The server name you would like data from
     * @param {string} [ifNoneMatch] ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param {number} [page] Which page of results to return
     * @param {string} [token] Access token to use if unable to set a header
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getCharactersCharacterIdWalletJournal(characterId: number, datasource?: 'tranquility', ifNoneMatch?: string, page?: number, token?: string, options?: AxiosRequestConfig) {
        return WalletApiFp(this.configuration).getCharactersCharacterIdWalletJournal(characterId, datasource, ifNoneMatch, page, token, options).then((request) => request(this.axios, this.basePath));
    }
}


